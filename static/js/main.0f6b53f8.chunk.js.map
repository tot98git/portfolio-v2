{"version":3,"sources":["Homepage/index.js","Playlist/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["activities","Homepage","_ref","url","history","react_default","a","createElement","className","Math","floor","random","length","onClick","push","href","src","alt","Playlist","title","allow","frameBorder","height","sandbox","routes","react_router_dom","react_router","exact","path","component","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAGMA,SAAa,CACjB,sDACA,4BACA,oBACA,mBACA,oBACA,+BA8BaC,EA5BE,SAAAC,GAAiB,IACbC,EADDC,EAAcF,EAAdE,QAGlB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAAA,UAAKP,EAAWS,KAAKC,MAAMD,KAAKE,SAAWX,EAAWY,UACtDP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAOK,SAXdV,EAWiC,WAXzB,kBAAMC,EAAQU,KAAKX,MAWtC,oBAIFE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,+BACNV,EAAAC,EAAAC,cAAA,OACES,IAAI,4EACJC,IAAI,qBCVHC,SAjBE,WACf,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UACEY,MAAM,kBACNC,MAAM,iCACNC,YAAY,IACZC,OAAO,MACPC,QAAQ,2IACRP,IAAI,6ECNZQ,EAAAnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjCI,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWX,MCAhCY,0LAJX,OAAOzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOgB,UAFfO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0f6b53f8.chunk.js","sourcesContent":["import React from 'react';\nimport './Styles.scss';\n\nconst activities = [\n  'Toti is working hard to bring this website to life.',\n  'Toti is learning Flutter.',\n  'Toti is studying.',\n  'Toti is working.',\n  'Toti is thinking.',\n  'Toti is doing great stuff.'\n];\nconst Homepage = ({ history }) => {\n  const handleNav = (url) => () => history.push(url);\n\n  return (\n    <div className=\"home-wrapper\">\n      <div className=\"container\">\n        <div className=\"title\">\n          <h1>Toti</h1>\n          <h1>.dev</h1>\n        </div>\n        <h4>{activities[Math.floor(Math.random() * activities.length)]}</h4>\n        <div className=\"nav\">\n          <button className=\"item\" onClick={handleNav('playlist')}>\n            Coding playlist\n          </button>\n        </div>\n        <div className=\"social\">\n          <a href=\"https://github.com/tot98git\">\n            <img\n              src=\"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png\"\n              alt=\"Github logo\"\n            />\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Homepage;\n","import React from 'react';\n\nimport './Styles.scss';\n\nconst Playlist = () => {\n  return (\n    <div className=\"playlist-wrapper\">\n      <div className=\"playlist-container\">\n        <iframe\n          title=\"coding playlist\"\n          allow=\"autoplay *; encrypted-media *;\"\n          frameBorder=\"0\"\n          height=\"450\"\n          sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation\"\n          src=\"https://embed.music.apple.com/bg/playlist/coding/pl.u-zPyLl96IkDdG6D\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Playlist;\n","import React from 'react';\n\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Homepage from './Homepage';\nimport Playlist from './Playlist';\n\nexport default (\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/\" component={Homepage} />\n      <Route exact path=\"/playlist\" component={Playlist} />\n    </Switch>\n  </HashRouter>\n);\n","import React, { Component } from 'react';\nimport routes from './routes';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return <div className=\"App\">{routes}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}